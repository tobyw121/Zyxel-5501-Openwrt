diff --git a/Makefile b/Makefile
index 14fc9e6f819aefebd1d81870b53380136d2d6197..12df144674451ac54edc8de88c154b46e9f480aa 100644
--- a/Makefile
+++ b/Makefile
@@ -24,7 +24,7 @@
 VERSION = 2013
 PATCHLEVEL = 01
 SUBLEVEL = 01
-EXTRAVERSION = -stg-3.1
+EXTRAVERSION = -stg-3.2
 ifneq "$(SUBLEVEL)" ""
 U_BOOT_VERSION = $(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
 else
diff --git a/arch/mips/cpu/mips32/danube/ebu.c b/arch/mips/cpu/mips32/danube/ebu.c
index af561b2782a2d3382fc21714a26fbdca3bd4ec5f..cbebeff408e229e8493a78dbc0a2a5a15b5f6738 100644
--- a/arch/mips/cpu/mips32/danube/ebu.c
+++ b/arch/mips/cpu/mips32/danube/ebu.c
@@ -9,9 +9,43 @@
 #include <asm/arch/soc.h>
 #include <asm/lantiq/io.h>
 
-#define LTQ_EBU_CON_0_RST_VAL	0x8001F7FF
+#define EBU_ADDRSEL_MASK(mask)		((mask & 0xf) << 4)
+#define EBU_ADDRSEL_REGEN		(1 << 0)
 
-#define LTQ_EBU_CON_WRDIS	(1 << 31)
+#define EBU_CON_WRDIS			(1 << 31)
+#define EBU_CON_AGEN_DEMUX		(0x0 << 24)
+#define EBU_CON_AGEN_MUX		(0x2 << 24)
+#define EBU_CON_SETUP			(1 << 22)
+#define EBU_CON_WAIT_DIS		(0x0 << 20)
+#define EBU_CON_WAIT_ASYNC		(0x1 << 20)
+#define EBU_CON_WAIT_SYNC		(0x2 << 20)
+#define EBU_CON_WINV			(1 << 19)
+#define EBU_CON_PW_8BIT			(0x0 << 16)
+#define EBU_CON_PW_16BIT		(0x1 << 16)
+#define EBU_CON_ALEC(cycles)		((cycles & 0x3) << 14)
+#define EBU_CON_BCGEN_CS		(0x0 << 12)
+#define EBU_CON_BCGEN_INTEL		(0x1 << 12)
+#define EBU_CON_BCGEN_MOTOROLA		(0x2 << 12)
+#define EBU_CON_WAITWRC(cycles)		((cycles & 0x7) << 8)
+#define EBU_CON_WAITRDC(cycles)		((cycles & 0x3) << 6)
+#define EBU_CON_HOLDC(cycles)		((cycles & 0x3) << 4)
+#define EBU_CON_RECOVC(cycles)		((cycles & 0x3) << 2)
+#define EBU_CON_CMULT_1			0x0
+#define EBU_CON_CMULT_4			0x1
+#define EBU_CON_CMULT_8			0x2
+#define EBU_CON_CMULT_16		0x3
+
+#if defined(CONFIG_LTQ_SUPPORT_NOR_FLASH)
+#define ebu_region0_enable		1
+#else
+#define ebu_region0_enable		0
+#endif
+
+#if defined(CONFIG_LTQ_SUPPORT_NAND_FLASH)
+#define ebu_region1_enable		1
+#else
+#define ebu_region1_enable		0
+#endif
 
 struct ltq_ebu_regs {
 	u32	clc;
@@ -30,19 +64,40 @@ static struct ltq_ebu_regs *ltq_ebu_regs =
 
 void ltq_ebu_init(void)
 {
-	/*
-	 * Map EBU region 0 to range 0x10000000-0x13ffffff and enable
-	 * region control. This supports up to 32 MiB NOR flash in
-	 * bank 0.
-	 */
-	ltq_writel(&ltq_ebu_regs->addr_sel_0, 0x10000011);
-
-	/*
-	 * Restore reset value to fix modifications by internal BootROM.
-	 * Also disable write protection.
-	 */
-	ltq_writel(&ltq_ebu_regs->con_0,
-			LTQ_EBU_CON_0_RST_VAL & ~LTQ_EBU_CON_WRDIS);
+	if (ebu_region0_enable) {
+		/*
+		 * Map EBU region 0 to range 0x10000000-0x13ffffff and enable
+		 * region control. This supports up to 32 MiB NOR flash in
+		 * bank 0.
+		 */
+		ltq_writel(&ltq_ebu_regs->addr_sel_0, LTQ_EBU_REGION0_BASE |
+			EBU_ADDRSEL_MASK(1) | EBU_ADDRSEL_REGEN);
+
+		ltq_writel(&ltq_ebu_regs->con_0, EBU_CON_AGEN_DEMUX |
+			EBU_CON_WAIT_DIS | EBU_CON_PW_16BIT |
+			EBU_CON_ALEC(3) | EBU_CON_BCGEN_INTEL |
+			EBU_CON_WAITWRC(7) | EBU_CON_WAITRDC(3) |
+			EBU_CON_HOLDC(3) | EBU_CON_RECOVC(3) |
+			EBU_CON_CMULT_16);
+	} else
+		ltq_clrbits(&ltq_ebu_regs->addr_sel_0, EBU_ADDRSEL_REGEN);
+
+	if (ebu_region1_enable) {
+		/*
+		 * Map EBU region 1 to range 0x14000000-0x13ffffff and enable
+		 * region control. This supports NAND flash in bank 1.
+		 */
+		ltq_writel(&ltq_ebu_regs->addr_sel_1, LTQ_EBU_REGION1_BASE |
+			EBU_ADDRSEL_MASK(3) | EBU_ADDRSEL_REGEN);
+
+		ltq_writel(&ltq_ebu_regs->con_1, EBU_CON_AGEN_DEMUX |
+			EBU_CON_SETUP | EBU_CON_WAIT_DIS | EBU_CON_PW_8BIT |
+			EBU_CON_ALEC(3) | EBU_CON_BCGEN_INTEL |
+			EBU_CON_WAITWRC(2) | EBU_CON_WAITRDC(2) |
+			EBU_CON_HOLDC(1) | EBU_CON_RECOVC(1) |
+			EBU_CON_CMULT_4);
+	} else
+		ltq_clrbits(&ltq_ebu_regs->addr_sel_1, EBU_ADDRSEL_REGEN);
 }
 
 void *flash_swap_addr(unsigned long addr)
diff --git a/arch/mips/include/asm/arch-danube/config.h b/arch/mips/include/asm/arch-danube/config.h
index d1033b085b067b5839c8bd1f9cda7bcdd920cc28..fb380ced90041a8e33e828bd88bc913b600eaabd 100644
--- a/arch/mips/include/asm/arch-danube/config.h
+++ b/arch/mips/include/asm/arch-danube/config.h
@@ -98,6 +98,14 @@
 #define CONFIG_CMD_SPI
 #endif
 
+#if defined(CONFIG_LTQ_SUPPORT_NAND_FLASH)
+#define CONFIG_NAND_LANTIQ
+#define CONFIG_SYS_MAX_NAND_DEVICE	1
+#define CONFIG_SYS_NAND_BASE		0xB4000000
+
+#define CONFIG_CMD_NAND
+#endif
+
 #if defined(CONFIG_LTQ_SUPPORT_ETHERNET)
 #define CONFIG_LANTIQ_DMA
 #define CONFIG_LANTIQ_DANUBE_ETOP
diff --git a/arch/mips/include/asm/arch-danube/nand.h b/arch/mips/include/asm/arch-danube/nand.h
new file mode 100644
index 0000000000000000000000000000000000000000..3349efc0bc943c044a7ee32c9b53d1b17bb44b7f
--- /dev/null
+++ b/arch/mips/include/asm/arch-danube/nand.h
@@ -0,0 +1,14 @@
+/*
+ * This file is released under the terms of GPL v2 and any later version.
+ * See the file COPYING in the root directory of the source tree for details.
+ *
+ * Copyright (C) 2012-2013 Daniel Schwierzeck, daniel.schwierzeck@gmail.com
+ */
+
+#ifndef __DANUBE_NAND_H__
+#define __DANUBE_NAND_H__
+
+struct nand_chip;
+int ltq_nand_init(struct nand_chip *nand);
+
+#endif /* __DANUBE_NAND_H__ */
diff --git a/arch/mips/include/asm/arch-danube/soc.h b/arch/mips/include/asm/arch-danube/soc.h
index 3621708310f30cfe37662c91cfef08dada8cabcb..a0e8fd0c625eba5aaf958c48279ca141cb5289d4 100644
--- a/arch/mips/include/asm/arch-danube/soc.h
+++ b/arch/mips/include/asm/arch-danube/soc.h
@@ -18,9 +18,8 @@
 
 #define LTQ_EBU_BASE			0x1E105300
 #define LTQ_EBU_REGION0_BASE		0x10000000
-#define LTQ_EBU_REGION0_SIZE		(64 * 1024 * 1024)
 #define LTQ_EBU_REGION1_BASE		0x14000000
-#define LTQ_EBU_REGION1_SIZE		(32 * 1024 * 1024)
+#define LTQ_EBU_NAND_BASE		(LTQ_EBU_BASE + 0xB0)
 
 #define LTQ_PPE_BASE			0x1E180000
 #define LTQ_PPE_ETOP_BASE		(LTQ_PPE_BASE + 0x11800)
diff --git a/board/lantiq/easy50712/easy50712.c b/board/lantiq/easy50712/easy50712.c
index 78cd4059d3e03e752b3db3371ce0947458308acc..dd6f01a37bbeb8998e6e77f235c89d0da8def4a7 100644
--- a/board/lantiq/easy50712/easy50712.c
+++ b/board/lantiq/easy50712/easy50712.c
@@ -19,6 +19,13 @@ static void gpio_init(void)
 	/* SPI/CS output (low-active) for serial flash */
 	gpio_direction_output(22, 1);
 
+	/* EBU.FL_CS1 as output for NAND CE */
+	gpio_set_altfunc(23, GPIO_ALTSEL_SET, GPIO_ALTSEL_CLR, GPIO_DIR_OUT);
+	/* EBU.FL_A23 as output for NAND CLE */
+	gpio_set_altfunc(24, GPIO_ALTSEL_SET, GPIO_ALTSEL_CLR, GPIO_DIR_OUT);
+	/* EBU.FL_A24 as output for NAND ALE */
+	gpio_set_altfunc(13, GPIO_ALTSEL_SET, GPIO_ALTSEL_CLR, GPIO_DIR_OUT);
+
 	/* enable CLK_OUT2 for external switch */
 	gpio_set_altfunc(3, GPIO_ALTSEL_SET, GPIO_ALTSEL_CLR, GPIO_DIR_OUT);
 }
diff --git a/include/configs/easy50712.h b/include/configs/easy50712.h
index ae9e1db16063031fa22d95fdab1a673ba279bafc..7b70404dbc92e2d8d4e0d5aecb4ab77bed6cb2f1 100644
--- a/include/configs/easy50712.h
+++ b/include/configs/easy50712.h
@@ -22,6 +22,8 @@
 #define CONFIG_LTQ_SUPPORT_SPI_FLASH
 #define CONFIG_SPI_FLASH_ATMEL		/* Have an AT45DB321D serial flash */
 
+#define CONFIG_LTQ_SUPPORT_NAND_FLASH
+
 #define CONFIG_LTQ_SUPPORT_SPL_NOR_FLASH	/* Build NOR flash SPL */
 
 #define CONFIG_LTQ_SPL_COMP_LZO
diff --git a/include/configs/sphairon_env.h b/include/configs/sphairon_env.h
index dcb25207eaa3c7b767bd214c6581e97347887f06..f50b35e8b6ff958d47b661d4377d0c8c6ec188c8 100644
--- a/include/configs/sphairon_env.h
+++ b/include/configs/sphairon_env.h
@@ -38,12 +38,6 @@
 #define CONFIG_ETHADDR				00:1c:28:ff:00:10
 #define CONFIG_LOADADDR				CONFIG_SYS_LOAD_ADDR
 
-#define CONFIG_ENV_ADDBOOTARGS						\
-	"addbootargs=setenv bootargs $bootargs $kernelcmdline"	\
-	" $mtdparts $rootfs $servicefs $defconfig"		\
-	" $flash_layout $ptest\0"
-
-#define CONFIG_ENV_SPHAIRON_GENERIC	\
-	CONFIG_ENV_ADDBOOTARGS
+#define CONFIG_ENV_SPHAIRON_GENERIC
 
 #endif /* _SPHAIRON_ENV_H_ */
diff --git a/include/sas/etl.h b/include/sas/etl.h
index eb11916831ab6676031858a9a0229a89c55111a4..f9a3321ffa9578757b379e8c6883592a8175cab4 100644
--- a/include/sas/etl.h
+++ b/include/sas/etl.h
@@ -37,6 +37,8 @@ void sas_etl_dump(void);
 
 int sas_etl_version(void);
 enum sas_flash_layout_type sas_etl_flash_layout(void);
+size_t sas_etl_data_part_size(void);
+enum sas_data_part_loc sas_etl_data_part_loc(void);
 
 const char *sas_etl_id_str(enum sas_etl_id idx);
 enum sas_etl_id sas_etl_id_parse(const char *str);
diff --git a/include/sas/etl_user.h b/include/sas/etl_user.h
index bc68203c2eb6c672d0a8a80082936e3a698a6d54..bcaa05a47d3bd208ffd590ce6049edf579c08e6a 100644
--- a/include/sas/etl_user.h
+++ b/include/sas/etl_user.h
@@ -32,6 +32,8 @@ enum sas_etl_id
 	SAS_ETL_SERIAL_EXTRA		= 20,
 	SAS_ETL_SHDSL_LINES		= 21,
 	SAS_ETL_MAC_ADDR_POOL		= 22,
+	SAS_ETL_DATA_PART_SIZE		= 23,
+	SAS_ETL_DATA_PART_LOC		= 24,
 	SAS_ETL_ID_LAST,
 };
 
@@ -75,6 +77,13 @@ struct sas_led_cfg
 	unsigned rsvd : 2;
 };
 
+enum sas_data_part_loc {
+	DATA_PART_LOC_AUTO	= 0,
+	DATA_PART_LOC_BOOT	= 1,
+	DATA_PART_LOC_NAND	= 2,
+	DATA_PART_LOC_INVALID,
+};
+
 static inline int sas_etl_is_string(enum sas_etl_id idx)
 {
 	switch (idx) {
@@ -104,6 +113,8 @@ static inline int sas_etl_is_integer(enum sas_etl_id idx)
 	case SAS_ETL_EXTRA_SPACE_SIZE:
 	case SAS_ETL_JFFS_IMAGES:
 	case SAS_ETL_SHDSL_LINES:
+	case SAS_ETL_DATA_PART_SIZE:
+	case SAS_ETL_DATA_PART_LOC:
 		return 1;
 	default:
 		return 0;
@@ -140,5 +151,9 @@ static inline size_t sas_etl_hex_size(enum sas_etl_id idx)
 
 #define SAS_ETL_AREA_SIZE		256
 #define SAS_ETL_VARIABLE_EMPTY_CHAR	0x78
+#define SAS_ETL_MAX_VALUE_CHARS		40
+#define SAS_ETL_V2_SIZE			256
+#define SAS_ETL_DATA_PART_LOC_DEFAULT	DATA_PART_LOC_AUTO
+#define SAS_ETL_DATA_PART_SIZE_DEFAULT	10
 
 #endif /* __SAS_ETL_USER_H__ */
diff --git a/include/sas/flash.h b/include/sas/flash.h
index 102b13d5bed7ec501f2b89b04fcfec4dd3c784c5..24abe9aeb3119f035af9a19824b9fea2b1e283f7 100644
--- a/include/sas/flash.h
+++ b/include/sas/flash.h
@@ -121,8 +121,7 @@ int sas_flash_part_mtd_register(struct mtd_info *mtd,
 				struct sas_flash_partition *part);
 
 struct mtd_info *sas_flash_boot_device(void);
-struct mtd_info *sas_flash_rootfs_device(void);
-struct mtd_info *sas_flash_data_device(void);
+struct mtd_info *sas_flash_nand_device(void);
 
 void sas_flash_partition_print(void);
 
diff --git a/include/sas/flashlayout.h b/include/sas/flashlayout.h
index 3bff27d875c1847de25190ba96ec069473bf2cb1..e192a22fe5a7652a389f4ba1efcb146ab04dea75 100644
--- a/include/sas/flashlayout.h
+++ b/include/sas/flashlayout.h
@@ -14,6 +14,10 @@ enum sas_flash_layout_type {
 	SAS_LAYOUT_PLATFORM_ONLY_MIRRORED,
 	SAS_LAYOUT_PLATFORM_SERVICE_SINGLE,
 	SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED,
+	SAS_LAYOUT_PLATFORM_ONLY_SINGLE_DATA,
+	SAS_LAYOUT_PLATFORM_ONLY_MIRRORED_DATA,
+	SAS_LAYOUT_PLATFORM_SERVICE_SINGLE_DATA,
+	SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED_DATA,
 	SAS_LAYOUT_INVALID
 };
 
@@ -21,12 +25,10 @@ struct mtd_info;
 
 int sas_flash_layout_static_init(void);
 
-int sas_flash_layout_dynamic_init(struct mtd_info *mtd, int is_boot_device,
+int sas_flash_layout_dynamic_init(struct mtd_info *boot_mtd,
+					struct mtd_info *nand_mtd,
 					enum sas_flash_layout_type layout);
 
-int sas_flash_layout_data_init(struct mtd_info *mtd,
-				enum sas_flash_layout_type layout);
-
 void sas_flash_layout_print(void);
 
 unsigned long sas_flash_layout_dynamic_offset(void);
@@ -37,6 +39,8 @@ sas_flash_layout_is_mirrored(enum sas_flash_layout_type layout)
 	switch (layout) {
 	case SAS_LAYOUT_PLATFORM_ONLY_MIRRORED:
 	case SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED:
+	case SAS_LAYOUT_PLATFORM_ONLY_MIRRORED_DATA:
+	case SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED_DATA:
 		return 1;
 	default:
 		return 0;
@@ -61,6 +65,10 @@ sas_flash_layout_has_image_parts(enum sas_flash_layout_type layout)
 	case SAS_LAYOUT_PLATFORM_SERVICE_SINGLE:
 	case SAS_LAYOUT_PLATFORM_ONLY_MIRRORED:
 	case SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED:
+	case SAS_LAYOUT_PLATFORM_ONLY_SINGLE_DATA:
+	case SAS_LAYOUT_PLATFORM_SERVICE_SINGLE_DATA:
+	case SAS_LAYOUT_PLATFORM_ONLY_MIRRORED_DATA:
+	case SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED_DATA:
 		return 1;
 	default:
 		return 0;
@@ -73,9 +81,13 @@ sas_flash_layout_image_part_cnt(enum sas_flash_layout_type layout)
 	switch (layout) {
 	case SAS_LAYOUT_PLATFORM_ONLY_SINGLE:
 	case SAS_LAYOUT_PLATFORM_SERVICE_SINGLE:
+	case SAS_LAYOUT_PLATFORM_ONLY_SINGLE_DATA:
+	case SAS_LAYOUT_PLATFORM_SERVICE_SINGLE_DATA:
 		return 1;
 	case SAS_LAYOUT_PLATFORM_ONLY_MIRRORED:
 	case SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED:
+	case SAS_LAYOUT_PLATFORM_ONLY_MIRRORED_DATA:
+	case SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED_DATA:
 		return 2;
 	default:
 		return 0;
@@ -109,6 +121,10 @@ sas_flash_layout_has_platform_images(enum sas_flash_layout_type layout)
 	case SAS_LAYOUT_PLATFORM_SERVICE_SINGLE:
 	case SAS_LAYOUT_PLATFORM_ONLY_MIRRORED:
 	case SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED:
+	case SAS_LAYOUT_PLATFORM_ONLY_SINGLE_DATA:
+	case SAS_LAYOUT_PLATFORM_SERVICE_SINGLE_DATA:
+	case SAS_LAYOUT_PLATFORM_ONLY_MIRRORED_DATA:
+	case SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED_DATA:
 		return 1;
 	default:
 		return 0;
@@ -121,6 +137,8 @@ sas_flash_layout_has_service_images(enum sas_flash_layout_type layout)
 	switch (layout) {
 	case SAS_LAYOUT_PLATFORM_SERVICE_SINGLE:
 	case SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED:
+	case SAS_LAYOUT_PLATFORM_SERVICE_SINGLE_DATA:
+	case SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED_DATA:
 		return 1;
 	default:
 		return 0;
@@ -128,19 +146,17 @@ sas_flash_layout_has_service_images(enum sas_flash_layout_type layout)
 }
 
 static inline int
-sas_flash_layout_has_nand_data_part(enum sas_flash_layout_type layout)
+sas_flash_layout_has_data_part(enum sas_flash_layout_type layout)
 {
-#ifdef CONFIG_LTQ_SUPPORT_NAND_FLASH
 	switch (layout) {
-	case SAS_LAYOUT_PLATFORM_SERVICE_SINGLE:
-	case SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED:
+	case SAS_LAYOUT_PLATFORM_ONLY_SINGLE_DATA:
+	case SAS_LAYOUT_PLATFORM_SERVICE_SINGLE_DATA:
+	case SAS_LAYOUT_PLATFORM_ONLY_MIRRORED_DATA:
+	case SAS_LAYOUT_PLATFORM_SERVICE_MIRRORED_DATA:
 		return 1;
 	default:
 		return 0;
 	}
-#else
-	return 0;
-#endif
 }
 
 struct sas_flash_partition *
diff --git a/lib/sphairon/cmd_sas_upgrade.c b/lib/sphairon/cmd_sas_upgrade.c
index b0289ede64048d0382c181afdb425cfa6e5bd4bd..076f08c7d59c2ee9953d2c1b7523e43df43263fd 100644
--- a/lib/sphairon/cmd_sas_upgrade.c
+++ b/lib/sphairon/cmd_sas_upgrade.c
@@ -178,7 +178,7 @@ static int do_sas_upgrade_uboot(cmd_tbl_t * cmdtp, int flag,
 U_BOOT_CMD(sas_upgrade_uboot, 4, 0, do_sas_upgrade_uboot,
 	"Update U-Boot in flash", "[-f] [addr size]\n");
 
-static int do_sas_upgrade_uboot_alt(cmd_tbl_t * cmdtp, int flag,
+static __maybe_unused int do_sas_upgrade_uboot_alt(cmd_tbl_t * cmdtp, int flag,
 					int argc, char *const argv[])
 {
 	struct sas_flash_partition *part;
@@ -208,10 +208,12 @@ static int do_sas_upgrade_uboot_alt(cmd_tbl_t * cmdtp, int flag,
 	return ret;
 }
 
+#ifndef CONFIG_SPHAIRON_NO_UBOOT_UPDATE
 U_BOOT_CMD(sas_upgrade_uboot_alt, 3, 0, do_sas_upgrade_uboot_alt,
 	"Update alternate U-Boot in flash", "[addr] [size]\n");
+#endif
 
-static int do_sas_erase_uboot_alt(cmd_tbl_t * cmdtp, int flag,
+static __maybe_unused int do_sas_erase_uboot_alt(cmd_tbl_t * cmdtp, int flag,
 					int argc, char *const argv[])
 {
 	struct sas_flash_partition *part;
@@ -228,8 +230,10 @@ static int do_sas_erase_uboot_alt(cmd_tbl_t * cmdtp, int flag,
 	return ret;
 }
 
+#ifndef CONFIG_SPHAIRON_NO_UBOOT_UPDATE
 U_BOOT_CMD(sas_erase_uboot_alt, 1, 0, do_sas_erase_uboot_alt,
 	"Erase second U-Boot in flash", "");
+#endif
 
 static int do_sas_upgrade_etl(cmd_tbl_t * cmdtp, int flag,
 				int argc, char *const argv[])
@@ -496,3 +500,38 @@ static int do_sas_erase_syscfg(cmd_tbl_t * cmdtp, int flag,
 
 U_BOOT_CMD(sas_erase_syscfg, 2, 0, do_sas_erase_syscfg,
 	"Erase sysconfig in flash", "[index]");
+
+static int do_sas_erase_images(cmd_tbl_t * cmdtp, int flag,
+				int argc, char *const argv[])
+{
+	struct sas_flash_partition *part;
+	enum sas_flash_part_type part_type;
+	int index = 0, ret;
+
+	sas_upgrade_index(argc, argv, &index);
+
+	switch (index) {
+	case 0:
+		part_type = SAS_PART_IMAGES1;
+		break;
+	case 1:
+		part_type = SAS_PART_IMAGES2;
+		break;
+	default:
+		puts("Invalid index\n");
+		return 1;
+	}
+
+	part = sas_flash_part_find(part_type);
+	if (!part)
+		return 1;
+
+	sas_flash_verbose_set(1);
+	ret = sas_flash_erase(part, 0, part->size);
+	sas_flash_verbose_set(0);
+
+	return ret;
+}
+
+U_BOOT_CMD(sas_erase_images, 2, 0, do_sas_erase_images,
+	"Erase images partition in flash", "[index]");
diff --git a/lib/sphairon/etl.c b/lib/sphairon/etl.c
index 859c9f84f97659b7ff72787eb65bf031be1881a1..5f59a86e8731c3dcf04eb092869d740a5ed7bffc 100644
--- a/lib/sphairon/etl.c
+++ b/lib/sphairon/etl.c
@@ -12,9 +12,6 @@
 #include <sas/util.h>
 #include <sas/flash.h>
 
-#define SAS_ETL_MAX_VALUE_CHARS		40
-#define SAS_ETL_V2_SIZE			256
-
 static char sas_etl_map[SAS_ETL_ID_LAST][SAS_ETL_MAX_VALUE_CHARS];
 static int sas_etl_ver;
 
@@ -289,6 +286,12 @@ void sas_etl_env_save(int *save_env)
 	sas_etl_env_set_default(SAS_ETL_MAC_ADDR_POOL, "etl_mac_addr_pool",
 		"8", save_env);
 
+	sas_etl_env_set_default(SAS_ETL_DATA_PART_SIZE, "etl_data_part_size",
+		"10", save_env);
+
+	sas_etl_env_set_default(SAS_ETL_DATA_PART_LOC, "etl_data_part_loc",
+		"0", save_env);
+
 	sas_etl_env_set_bcd(SAS_ETL_WLANCFG, "etl_wlanconfig", save_env);
 	sas_etl_env_set_bcd(SAS_ETL_LEDCFG, "etl_led", save_env);
 
@@ -418,6 +421,10 @@ void sas_etl_print(void)
 		sas_etl_get_string(SAS_ETL_BASE_PLATFORM));
 	sas_etl_banner_print("Flash layout",
 		sas_etl_get_string(SAS_ETL_FLASH_LAYOUT));
+	sas_etl_banner_print("Data partition size",
+		sas_etl_get_string(SAS_ETL_DATA_PART_SIZE));
+	sas_etl_banner_print("Data partition location",
+		sas_etl_get_string(SAS_ETL_DATA_PART_LOC));
 
 	sas_banner_line_print();
 
@@ -473,6 +480,26 @@ enum sas_flash_layout_type sas_etl_flash_layout(void)
 	return sas_flash_layout_parse(val);
 }
 
+size_t sas_etl_data_part_size(void)
+{
+	size_t size = sas_etl_get_integer(SAS_ETL_DATA_PART_SIZE);
+
+	if (!size)
+		size = SAS_ETL_DATA_PART_SIZE_DEFAULT;
+
+	return size << 20;
+}
+
+enum sas_data_part_loc sas_etl_data_part_loc(void)
+{
+	int loc = sas_etl_get_integer(SAS_ETL_DATA_PART_LOC);
+
+	if (loc < 0 || loc >= DATA_PART_LOC_INVALID)
+		return SAS_ETL_DATA_PART_LOC_DEFAULT;
+
+	return loc;
+}
+
 static const char sas_etl_id_strings[][16] = {
 	"hw_version",
 	"serial_no",
@@ -496,6 +523,8 @@ static const char sas_etl_id_strings[][16] = {
 	"serial_extra",
 	"shdsl_lines",
 	"mac_addr_pool",
+	"data_part_size",
+	"data_part_loc",
 };
 
 const char *sas_etl_id_str(enum sas_etl_id idx)
diff --git a/lib/sphairon/flash.c b/lib/sphairon/flash.c
index e62e4165529eeb7a8fe8066ec40469a91e0df5df..e20bf6123b900f8f84630f65e5dc697a651ed107 100644
--- a/lib/sphairon/flash.c
+++ b/lib/sphairon/flash.c
@@ -30,7 +30,7 @@ int sas_flash_init(void)
 	snprintf(mtdids, sizeof(mtdids - 1), "%s", MTDIDS_DEFAULT);
 
 	/* strip nand0 from mtdids if not assembled */
-	if (!sas_flash_data_device()) {
+	if (!sas_flash_nand_device()) {
 		/* check if nand0 is configured */
 		nand = strstr(mtdids, "nand0");
 		if (nand) {
@@ -193,12 +193,7 @@ struct mtd_info *sas_flash_boot_device(void)
 	return sas_flash_part_mtd_parent(part);
 }
 
-struct mtd_info *sas_flash_rootfs_device(void)
-{
-	return sas_flash_boot_device();
-}
-
-struct mtd_info *sas_flash_data_device(void)
+struct mtd_info *sas_flash_nand_device(void)
 {
 #ifdef CONFIG_CMD_NAND
 	struct mtd_info *mtd = get_mtd_device_nm("nand0");
diff --git a/lib/sphairon/flashlayout.c b/lib/sphairon/flashlayout.c
index 93dd7583886ff10c277b822583e670ff0de27f5c..3d6ce6a83080c00b2f120e3ee9ca9c4a904fd0b5 100644
--- a/lib/sphairon/flashlayout.c
+++ b/lib/sphairon/flashlayout.c
@@ -12,6 +12,7 @@
 #include <sas/flashlayout.h>
 #include <sas/util.h>
 #include <sas/flash.h>
+#include <sas/etl.h>
 
 #if defined(CONFIG_ENV_OFFSET) && defined(CONFIG_ENV_SECT_SIZE)
 #define UBOOT_ENV_OFFSET		CONFIG_ENV_OFFSET
@@ -25,7 +26,7 @@
 
 struct sas_layout_map {
 	const char name[4];
-	const char desc[28];
+	const char desc[36];
 };
 
 static enum sas_flash_layout_type sas_flash_layout;
@@ -92,6 +93,9 @@ static int sas_flash_layout_dynamic_part_add(struct mtd_info *mtd,
 	struct sas_flash_partition *part;
 	int err;
 
+	debug("%s: mtd %s, type %s, offset %08lx, size %08zx\n", __func__,
+		mtd->name, sas_flash_partition_str(type), offset, size);
+
 	part = sas_flash_part_create(type);
 	if (!part)
 		return 1;
@@ -109,65 +113,108 @@ static int sas_flash_layout_dynamic_part_add(struct mtd_info *mtd,
 	return 0;
 }
 
-int sas_flash_layout_dynamic_init(struct mtd_info *mtd, int is_boot_device,
-				enum sas_flash_layout_type layout)
+int sas_flash_layout_dynamic_init(struct mtd_info *boot_mtd,
+					struct mtd_info *nand_mtd,
+					enum sas_flash_layout_type layout)
 {
+	struct mtd_info *data_mtd = NULL;
 	size_t size, offset;
+	size_t data_size = 0, data_offset = 0;
 	uint64_t available_size;
 	uint32_t n;
 	int err;
 
-	if (!mtd)
+	if (!boot_mtd)
 		return 0;
 
-	debug("%s: mtd %s, is_boot_device %d, layout %s\n",
-		__func__, mtd->name, is_boot_device,
+	debug("%s: boot_mtd %s, nand_mtd %s, layout %s\n",
+		__func__, boot_mtd->name, nand_mtd ? nand_mtd->name : "none",
 		sas_flash_layout_str(layout));
 
-	if (is_boot_device)
-		offset = sas_flash_layout_dynamic_offset();
-	else
-		offset = 0;
+	offset = sas_flash_layout_dynamic_offset();
 
 	if (sas_flash_layout_has_sysconfig_part(layout)) {
 		size = SYSCFG_MIN_SIZE;
 
-		err = sas_flash_layout_dynamic_part_add(mtd, SAS_PART_SYSCFG1,
-			offset, size);
+		err = sas_flash_layout_dynamic_part_add(boot_mtd,
+			SAS_PART_SYSCFG1, offset, size);
 		if (err)
 			return 1;
 
-		if (sas_flash_layout_is_mirrored(layout)) {
-			offset += size;
+		offset += size;
 
-			err = sas_flash_layout_dynamic_part_add(mtd,
+		if (sas_flash_layout_is_mirrored(layout)) {
+			err = sas_flash_layout_dynamic_part_add(boot_mtd,
 				SAS_PART_SYSCFG2, offset, size);
 			if (err)
 				return 1;
+
+			offset += size;
 		}
 	}
 
+	switch (sas_etl_data_part_loc()) {
+	case DATA_PART_LOC_BOOT:
+		if (sas_flash_layout_has_data_part(layout)) {
+			data_mtd = boot_mtd;
+			data_size = sas_etl_data_part_size();
+			data_offset = offset;
+			offset += data_size;
+		}
+		break;
+	case DATA_PART_LOC_NAND:
+		if (!nand_mtd)
+			return 1;
+
+		if (sas_flash_layout_has_data_part(layout)) {
+			data_mtd = nand_mtd;
+			data_size = nand_mtd->size;
+			data_offset = 0;
+		}
+		break;
+	case DATA_PART_LOC_AUTO:
+		if (nand_mtd) {
+			data_mtd = nand_mtd;
+			data_size = nand_mtd->size;
+			data_offset = 0;
+		} else if (sas_flash_layout_has_data_part(layout)) {
+			data_mtd = boot_mtd;
+			data_size = sas_etl_data_part_size();
+			data_offset = offset;
+			offset += data_size;
+		}
+		break;
+	default:
+		return 1;
+	}
+
+	if (data_mtd) {
+		err = sas_flash_layout_dynamic_part_add(data_mtd, SAS_PART_DATA,
+			data_offset, data_size);
+		if (err)
+			return 1;
+	}
+
 	if (sas_flash_layout_has_image_parts(layout)) {
-		offset += size;
-		available_size = mtd->size - offset;
+		available_size = boot_mtd->size - offset;
 
 		if (sas_flash_layout_is_mirrored(layout)) {
-			n = mtd_div_by_eb(available_size, mtd);
+			n = mtd_div_by_eb(available_size, boot_mtd);
 			n >>= 1;
-			size = n * mtd->erasesize;
+			size = n * boot_mtd->erasesize;
 		}
 		else
 			size = available_size;
 
-		err = sas_flash_layout_dynamic_part_add(mtd, SAS_PART_IMAGES1,
-			offset, size);
+		err = sas_flash_layout_dynamic_part_add(boot_mtd,
+			SAS_PART_IMAGES1, offset, size);
 		if (err)
 			return 1;
 
 		if (sas_flash_layout_is_mirrored(layout)) {
 			offset += size;
 
-			err = sas_flash_layout_dynamic_part_add(mtd,
+			err = sas_flash_layout_dynamic_part_add(boot_mtd,
 				SAS_PART_IMAGES2, offset, size);
 			if (err)
 				return 1;
@@ -179,25 +226,6 @@ int sas_flash_layout_dynamic_init(struct mtd_info *mtd, int is_boot_device,
 	return 0;
 }
 
-int sas_flash_layout_data_init(struct mtd_info *mtd,
-				enum sas_flash_layout_type layout)
-{
-	int err;
-
-	if (!mtd)
-		return 0;
-
-	debug("%s: mtd %s, layout %s\n",
-		__func__, mtd->name, sas_flash_layout_str(layout));
-
-	err = sas_flash_layout_dynamic_part_add(mtd, SAS_PART_DATA, 0,
-						mtd->size);
-	if (err)
-		return 1;
-
-	return 0;
-}
-
 void sas_flash_layout_print(void)
 {
 	sas_banner_header_print("Flash partition info");
@@ -237,6 +265,10 @@ static const struct sas_layout_map sas_flash_layout_strings[] = {
 	{ "pom", "Platform only - mirrored" },
 	{ "pss", "Platform/Service - single" },
 	{ "psm", "Platform/Service - mirrored" },
+	{ "posd", "Platform only/Data - single" },
+	{ "pomd", "Platform only/Data - mirrored" },
+	{ "pssd", "Platform/Service/Data - single" },
+	{ "psmd", "Platform/Service/Data - mirrored" },
 	{ "", "invalid" }
 };
 
@@ -265,7 +297,7 @@ enum sas_flash_layout_type sas_flash_layout_parse(const char *str)
 	for (i = 0; i < SAS_LAYOUT_INVALID; i++) {
 		name = sas_flash_layout_strings[i].name;
 
-		if (!strncmp(name, str, 3))
+		if (!strncmp(name, str, 4))
 			return i;
 	}
 
diff --git a/lib/sphairon/init.c b/lib/sphairon/init.c
index 7439ebc0fe3a5420504a4b767be2e9d1a3cc69d8..071928f41034545e500e4bcfe67a3a9d62159d61 100644
--- a/lib/sphairon/init.c
+++ b/lib/sphairon/init.c
@@ -36,7 +36,7 @@ int sas_init_r(void)
 	int ret;
 	int save_env = 0;
 	enum sas_flash_layout_type layout;
-	struct mtd_info *boot_mtd, *rootfs_mtd, *data_mtd;
+	struct mtd_info *boot_mtd, *nand_mtd;
 
 	printf("Reloc: offset @ 0x%08lx\n", gd->reloc_off);
 
@@ -64,19 +64,14 @@ int sas_init_r(void)
 		}
 
 		if (sas_etl_version()) {
-			rootfs_mtd = sas_flash_rootfs_device();
-			data_mtd = sas_flash_data_device();
+			nand_mtd = sas_flash_nand_device();
 			layout = sas_etl_flash_layout();
 
-			ret = sas_flash_layout_dynamic_init(rootfs_mtd, 1,
+			ret = sas_flash_layout_dynamic_init(boot_mtd, nand_mtd,
 				layout);
 			if (ret)
 				goto err;
 
-			ret = sas_flash_layout_data_init(data_mtd, layout);
-			if (ret)
-				goto err;
-
 			ret = sas_boot_scan_images();
 			if (ret)
 				goto err;
@@ -103,6 +98,7 @@ int sas_init_r(void)
 
 err:
 	puts("Failed to initialize Sphairon lib\n");
+	setenv("bootcmd", NULL);
 
 	return ret;
 }
