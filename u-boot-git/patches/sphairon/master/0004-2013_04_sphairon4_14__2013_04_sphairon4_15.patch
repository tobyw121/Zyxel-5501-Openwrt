diff --git a/Makefile b/Makefile
index 3f842003e0872bf4e2658f9b0e0d7877e270af66..991b2af1e1cddebb5c68056dfb64769bfbbcdbbf 100644
--- a/Makefile
+++ b/Makefile
@@ -24,7 +24,7 @@
 VERSION = 2013
 PATCHLEVEL = 04
 SUBLEVEL =
-EXTRAVERSION = -sphairon4.14
+EXTRAVERSION = -sphairon4.15
 ifneq "$(SUBLEVEL)" ""
 U_BOOT_VERSION = $(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
 else
diff --git a/arch/mips/lib/board.c b/arch/mips/lib/board.c
index 6c65d97a5d42c800d6c25da927f1a526919a6757..8461b04503739d9d9a3307c8425bf19daec3b162 100644
--- a/arch/mips/lib/board.c
+++ b/arch/mips/lib/board.c
@@ -326,6 +326,8 @@ void board_init_r(gd_t *id, ulong dest_addr)
 	/* relocate environment function pointers etc. */
 	env_relocate();
 
+	sas_early_init_r();
+
 #if defined(CONFIG_PCI)
 	/*
 	 * Do pci configuration
@@ -359,7 +361,7 @@ void board_init_r(gd_t *id, ulong dest_addr)
 	eth_initialize(gd->bd);
 #endif
 
-	sas_init_r();
+	sas_late_init_r();
 
 	/* main_loop() can return to retry autoboot, if so just run it again. */
 	for (;;)
diff --git a/board/sphairon/sl550x/sl550x.c b/board/sphairon/sl550x/sl550x.c
index 54a95eca077ee55e0bafe2be4e5ecaba44707dd8..e1ee8c2a8b0f3620c7bf8c06a8d49c5dab944474 100644
--- a/board/sphairon/sl550x/sl550x.c
+++ b/board/sphairon/sl550x/sl550x.c
@@ -13,6 +13,7 @@
 #include <asm/lantiq/cpu.h>
 #include <asm/arch/gphy.h>
 #include <sas/controlfile.h>
+#include <sas/etl.h>
 
 #if defined(CONFIG_SPL_BUILD)
 #define do_gpio_init	1
@@ -39,6 +40,8 @@ static inline void gpio_init(void)
 
 	/* LED Power green */
 	gpio_direction_output(3, 1);
+	/* LED FXO green */
+	gpio_direction_output(14, 1);
 	/* LED Power red */
 	gpio_direction_output(19, 0);
 	/* LED Info green */
@@ -61,6 +64,8 @@ static inline void gpio_init(void)
 
 	/* SPI CS 1.0 to ISAC-SX */
 	gpio_direction_output(39, 1);
+	/* SPI CS 1.1 to IPAC-X FXO */
+	gpio_direction_output(22, 1);
 
 	/* USB port0 power enable, disabled at startup */
 	gpio_direction_output(41, 0);
@@ -115,7 +120,27 @@ int checkboard(void)
 	return 0;
 }
 
-static const struct ltq_eth_port_config eth_port_config[] = {
+static const struct ltq_eth_port_config eth_port_sl4501[] = {
+	/* GMAC0: unused */
+	{ 0, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC1: unused */
+	{ 1, 0x1, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC2: internal GPHY0 with 10/100/1000 firmware for LAN port 1 */
+	{ 2, 0x11, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_GMII },
+	/* GMAC3: unused */
+	{ 3, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC4: internal GPHY0 with 10/100/1000 firmware for LAN port 2 */
+	{ 4, 0x13, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_GMII },
+	/* GMAC5: Ralink iNIC */
+	{ 5, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+};
+
+static const struct ltq_eth_board_config eth_board_sl4501 = {
+	.ports = eth_port_sl4501,
+	.num_ports = ARRAY_SIZE(eth_port_sl4501),
+};
+
+static const struct ltq_eth_port_config eth_port_sl5501[] = {
 	/* GMAC0: external Lantiq PEF7071 10/100/1000 PHY for WANoE port */
 	{ 0, 0x0, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_RGMII },
 	/* GMAC1: external Lantiq PEF7071 10/100/1000 PHY for LAN port 3/4 */
@@ -130,9 +155,49 @@ static const struct ltq_eth_port_config eth_port_config[] = {
 	{ 5, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
 };
 
-static const struct ltq_eth_board_config eth_board_config = {
-	.ports = eth_port_config,
-	.num_ports = ARRAY_SIZE(eth_port_config),
+static const struct ltq_eth_board_config eth_board_sl5501 = {
+	.ports = eth_port_sl5501,
+	.num_ports = ARRAY_SIZE(eth_port_sl5501),
+};
+
+static const struct ltq_eth_port_config eth_port_sl6501[] = {
+	/* GMAC0: unused */
+	{ 0, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC1: external Lantiq PEF7071 10/100/1000 PHY for LAN port 3/4 */
+	{ 1, 0x1, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_RGMII },
+	/* GMAC2: internal GPHY1 with 10/100 firmware for LAN port 1/2 */
+	{ 2, 0x11, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_MII },
+	/* GMAC3: internal GPHY0 with 10/100 firmware for LAN port 1/2 */
+	{ 3, 0x12, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_MII },
+	/* GMAC4: internal GPHY0 with 10/100/1000 firmware for LAN port 3/4 */
+	{ 4, 0x13, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_GMII },
+	/* GMAC5: Ralink iNIC */
+	{ 5, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+};
+
+static const struct ltq_eth_board_config eth_board_sl6501 = {
+	.ports = eth_port_sl6501,
+	.num_ports = ARRAY_SIZE(eth_port_sl6501),
+};
+
+static const struct ltq_eth_port_config eth_port_compat[] = {
+	/* GMAC0: unused */
+	{ 0, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC1: unused */
+	{ 1, 0x1, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC2: unused */
+	{ 2, 0x11, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC3: unused */
+	{ 3, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+	/* GMAC4: internal GPHY0 with 10/100/1000 firmware for LAN port 2 */
+	{ 4, 0x13, LTQ_ETH_PORT_PHY, PHY_INTERFACE_MODE_GMII },
+	/* GMAC5: Ralink iNIC */
+	{ 5, 0x0, LTQ_ETH_PORT_NONE, PHY_INTERFACE_MODE_NONE },
+};
+
+static const struct ltq_eth_board_config eth_board_compat = {
+	.ports = eth_port_compat,
+	.num_ports = ARRAY_SIZE(eth_port_compat),
 };
 
 int board_eth_init(bd_t * bis)
@@ -140,16 +205,30 @@ int board_eth_init(bd_t * bis)
 	const enum ltq_gphy_clk clk = LTQ_GPHY_CLK_25MHZ_PLL0;
 	const ulong fw_ge_addr = 0x80FE0000;
 	const ulong fw_fe_addr = 0x80FF0000;
+	unsigned int base_platform = sas_etl_base_platform();
 
 	ltq_gphy_phy11g_a2x_load(fw_ge_addr);
 	ltq_gphy_phy22f_a2x_load(fw_fe_addr);
 
 	ltq_cgu_gphy_clk_src(clk);
 
-	ltq_rcu_gphy_boot(0, fw_fe_addr);
-	ltq_rcu_gphy_boot(1, fw_ge_addr);
-
-	return ltq_eth_initialize(&eth_board_config);
+	switch (base_platform) {
+	case 425:
+		ltq_rcu_gphy_boot(0, fw_ge_addr);
+		ltq_rcu_gphy_boot(1, fw_ge_addr);
+		return ltq_eth_initialize(&eth_board_sl4501);
+	case 420:
+		ltq_rcu_gphy_boot(0, fw_fe_addr);
+		ltq_rcu_gphy_boot(1, fw_ge_addr);
+		return ltq_eth_initialize(&eth_board_sl5501);
+	case 424:
+		ltq_rcu_gphy_boot(0, fw_fe_addr);
+		ltq_rcu_gphy_boot(1, fw_ge_addr);
+		return ltq_eth_initialize(&eth_board_sl6501);
+	default:
+		ltq_rcu_gphy_boot(1, fw_ge_addr);
+		return ltq_eth_initialize(&eth_board_compat);
+	}
 }
 
 int spi_cs_is_valid(unsigned int bus, unsigned int cs)
@@ -165,24 +244,26 @@ int spi_cs_is_valid(unsigned int bus, unsigned int cs)
 
 void spi_cs_activate(struct spi_slave *slave)
 {
-	switch (slave->cs) {
-	case 4:
-		gpio_set_value(10, 0);
-		break;
-	default:
-		break;
-	}
+	int gpio = -1;
+
+	/* Serial flash at bus 0 (SPI) */
+	if (slave->bus == 0 && slave->cs == 4)
+		gpio = 10;
+
+	if (gpio >= 0)
+		gpio_set_value(gpio, 0);
 }
 
 void spi_cs_deactivate(struct spi_slave *slave)
 {
-	switch (slave->cs) {
-	case 4:
-		gpio_set_value(10, 1);
-		break;
-	default:
-		break;
-	}
+	int gpio = -1;
+
+	/* Serial flash at bus 0 (SPI) */
+	if (slave->bus == 0 && slave->cs == 4)
+		gpio = 10;
+
+	if (gpio >= 0)
+		gpio_set_value(gpio, 1);
 }
 
 int sas_cf_check_board(void)
diff --git a/include/configs/sl550x.h b/include/configs/sl550x.h
index 1a04f64cf73645317b34afe52aafa83fd7e80ef7..238a1599e2eac544643f877caa0e66877099d915 100644
--- a/include/configs/sl550x.h
+++ b/include/configs/sl550x.h
@@ -10,7 +10,7 @@
 
 #define CONFIG_MACH_TYPE	"SPHSL550X"
 #define CONFIG_IDENT_STRING	" "CONFIG_MACH_TYPE
-#define CONFIG_BOARD_NAME	"Sphairon Speedlink 550x IAD"
+#define CONFIG_BOARD_NAME	"Sphairon Speedlink 4501/5501/6501 IAD"
 
 /* Configure SoC */
 #define CONFIG_LTQ_SUPPORT_UART		/* Enable ASC and UART */
diff --git a/include/sas/etl.h b/include/sas/etl.h
index f9a3321ffa9578757b379e8c6883592a8175cab4..2cdd11d4ad74247196e30410d7630511ef064819 100644
--- a/include/sas/etl.h
+++ b/include/sas/etl.h
@@ -39,6 +39,7 @@ int sas_etl_version(void);
 enum sas_flash_layout_type sas_etl_flash_layout(void);
 size_t sas_etl_data_part_size(void);
 enum sas_data_part_loc sas_etl_data_part_loc(void);
+unsigned int sas_etl_base_platform(void);
 
 const char *sas_etl_id_str(enum sas_etl_id idx);
 enum sas_etl_id sas_etl_id_parse(const char *str);
diff --git a/include/sas/etl_user.h b/include/sas/etl_user.h
index de329a81f12793bd0e0f1fe1a73d61a11b4e2a8a..f7cc600e2857f76a292b78f3ae4bd780e892d71c 100644
--- a/include/sas/etl_user.h
+++ b/include/sas/etl_user.h
@@ -116,6 +116,7 @@ static inline int sas_etl_is_integer(enum sas_etl_id idx)
 	case SAS_ETL_EXTRA_SPACE_SIZE:
 	case SAS_ETL_JFFS_IMAGES:
 	case SAS_ETL_SHDSL_LINES:
+	case SAS_ETL_MAC_ADDR_POOL:
 	case SAS_ETL_DATA_PART_SIZE:
 	case SAS_ETL_DATA_PART_LOC:
 		return 1;
diff --git a/include/sas/init.h b/include/sas/init.h
index 92bf7a0ab204641720c20e5fbbe60b0b545b25ee..1449e1defd14090457779a21329807952b13f962 100644
--- a/include/sas/init.h
+++ b/include/sas/init.h
@@ -10,21 +10,27 @@
 
 #ifdef CONFIG_LIB_SPHAIRON
 int sas_init_f(void);
-
-int sas_init_r(void);
+int sas_early_init_r(void);
+int sas_late_init_r(void);
 #else
 static inline int sas_init_f(void)
 {
 	return 0;
 }
 
-static inline int sas_init_r(void)
+static inline int sas_early_init_r(void)
+{
+	return 0;
+}
+
+static inline int sas_late_init_r(void)
 {
 	return 0;
 }
 #endif
 
 int sas_board_init_f(void);
-int sas_board_init_r(void);
+int sas_board_early_init_r(void);
+int sas_board_late_init_r(void);
 
 #endif /* __SAS_INIT_H__ */
diff --git a/lib/sphairon/cmd_sas_boot.c b/lib/sphairon/cmd_sas_boot.c
index 6c82adaf8d1d9cec1e5d66b3c180f8c216c325b7..a2842890fdadfe00f31c280713919fcf11f689c8 100644
--- a/lib/sphairon/cmd_sas_boot.c
+++ b/lib/sphairon/cmd_sas_boot.c
@@ -256,6 +256,14 @@ static void sas_env_compat_set(int *save_env)
 	sas_setenv("uboot_builddate", U_BOOT_DATE " " U_BOOT_TIME, save_env);
 }
 
+static void sas_env_base_platform_set(int *save_env)
+{
+	char buf[24];
+
+	sprintf(buf, "0x%08x", sas_etl_base_platform());
+	sas_setenv("base_platform", buf, save_env);
+}
+
 static void sas_env_bootargs_add(const char *value)
 {
 	sas_run_command("setenv bootargs $bootargs %s", value);
@@ -266,7 +274,7 @@ static void sas_env_bootargs_init(int ptest_mode)
 	sas_env_bootargs_add("console=$consoledev,$baudrate");
 	sas_env_bootargs_add("ip=$ipaddr:$serverip::::$netdev:off");
 	sas_env_bootargs_add("ethaddr=$ethaddr");
-	sas_env_bootargs_add("machtype=" CONFIG_MACH_TYPE);
+	sas_env_bootargs_add("base_platform=$base_platform");
 	sas_env_bootargs_add("$kernelcmdline $mtdparts $flash_layout");
 	sas_env_bootargs_add("$rootfs $servicefs $defconfig");
 
@@ -434,6 +442,7 @@ static int do_sas_boot(cmd_tbl_t * cmdtp, int flag, int argc, char *const argv[]
 	/* Handle persistent env variables */
 	sas_env_bootargs_clear();
 	sas_env_flashlayout_set(flash_layout, &save_env);
+	sas_env_base_platform_set(&save_env);
 	sas_env_compat_set(&save_env);
 
 	retry = 0;
diff --git a/lib/sphairon/etl.c b/lib/sphairon/etl.c
index 7f395c30936b785f223bf17b2d7c87a3baafe975..c8f4ffcfcd834e2fe924b93789974581c6d6b86a 100644
--- a/lib/sphairon/etl.c
+++ b/lib/sphairon/etl.c
@@ -424,14 +424,20 @@ const char *sas_etl_get_string(enum sas_etl_id idx)
 int sas_etl_get_integer(enum sas_etl_id idx)
 {
 	const struct sas_etl_map_entry *entry = sas_etl_entry_find(idx);
-	unsigned long val;
+	const char *cp;
 
 	if (!entry)
 		return 0;
 
-	strict_strtoul(entry->val, 10, &val);
+	/*
+	 * if first char is '0', remove it. Otherwise simple_strtoul sets
+	 * base to octal but we want decimal or hex.
+	 */
+	cp = entry->val;
+	if (*cp == '0')
+		cp++;
 
-	return val;
+	return simple_strtol(cp, NULL, 0);
 }
 
 unsigned long sas_etl_get_hex(enum sas_etl_id idx, unsigned int len)
@@ -596,6 +602,14 @@ enum sas_data_part_loc sas_etl_data_part_loc(void)
 	return loc;
 }
 
+unsigned int sas_etl_base_platform(void)
+{
+	if (!sas_etl_ver)
+		return 0;
+
+	return sas_etl_get_integer(SAS_ETL_BASE_PLATFORM);
+}
+
 static const char sas_etl_id_strings[][16] = {
 	"hw_version",
 	"serial_no",
diff --git a/lib/sphairon/init.c b/lib/sphairon/init.c
index 4e462627657659cbe3371bc86e6cbdca7e3e8e18..69b60d2d8d594e65f71e6a8624d9ad135318e18f 100644
--- a/lib/sphairon/init.c
+++ b/lib/sphairon/init.c
@@ -31,7 +31,12 @@ __weak int sas_board_init_f(void)
 	return 0;
 }
 
-__weak int sas_board_init_r(void)
+__weak int sas_board_early_init_r(void)
+{
+	return 0;
+}
+
+__weak int sas_board_late_init_r(void)
 {
 	return 0;
 }
@@ -47,12 +52,15 @@ int sas_init_f(void)
 	return 0;
 }
 
-int sas_init_r(void)
+static void sas_init_error(void)
+{
+	puts("Failed to initialize Sphairon lib\n");
+	setenv("bootcmd", NULL);
+}
+
+int sas_early_init_r(void)
 {
 	int ret;
-	int save_env = 0;
-	enum sas_flash_layout_type layout;
-	struct mtd_info *boot_mtd, *nand_mtd;
 
 	printf("Reloc: offset @ 0x%08lx\n", gd->reloc_off);
 
@@ -60,8 +68,6 @@ int sas_init_r(void)
 	if (ret)
 		goto err;
 
-	sas_boot_init();
-
 	if (init_flash_layout) {
 		ret = sas_flash_layout_static_init();
 		if (ret)
@@ -70,7 +76,29 @@ int sas_init_r(void)
 		ret = sas_etl_init();
 		if (ret)
 			goto err;
+	}
+
+	ret = sas_board_early_init_r();
+	if (ret)
+		goto err;
 
+	return 0;
+err:
+	sas_init_error();
+
+	return ret;
+}
+
+int sas_late_init_r(void)
+{
+	int ret;
+	int save_env = 0;
+	enum sas_flash_layout_type layout;
+	struct mtd_info *boot_mtd, *nand_mtd;
+
+	sas_boot_init();
+
+	if (init_flash_layout) {
 		sas_etl_env_set_ethaddr(&save_env);
 
 		boot_mtd = sas_flash_boot_device();
@@ -98,7 +126,7 @@ int sas_init_r(void)
 		sas_boot_print();
 	}
 
-	ret = sas_board_init_r();
+	ret = sas_board_late_init_r();
 	if (ret)
 		goto err;
 
@@ -117,8 +145,7 @@ int sas_init_r(void)
 	return 0;
 
 err:
-	puts("Failed to initialize Sphairon lib\n");
-	setenv("bootcmd", NULL);
+	sas_init_error();
 
 	return ret;
 }
