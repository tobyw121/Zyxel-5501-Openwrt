diff --git a/Makefile b/Makefile
index ea7e10e897917cb930ea3d0e4d5da377f3052393..6495add9f155397959ceb061619fe6da7e89ad27 100644
--- a/Makefile
+++ b/Makefile
@@ -24,7 +24,7 @@
 VERSION = 2011
 PATCHLEVEL = 12
 SUBLEVEL =
-EXTRAVERSION = -stg-1.1
+EXTRAVERSION = -stg-1.2
 ifneq "$(SUBLEVEL)" ""
 U_BOOT_VERSION = $(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
 else
diff --git a/arch/mips/cpu/mips32/vrx200/cgu_init.S b/arch/mips/cpu/mips32/vrx200/cgu_init.S
index 1b2998fde36e698994e281dcbd10908f236256fd..378485fe1f42f3890fb94505e751b5b513601592 100644
--- a/arch/mips/cpu/mips32/vrx200/cgu_init.S
+++ b/arch/mips/cpu/mips32/vrx200/cgu_init.S
@@ -13,25 +13,25 @@
 #include <asm/arch/soc.h>
 
 /* RCU module register */
-#define LTQ_RCU_RST_REQ		0x0010	/* Reset request */
-#define LTQ_RCU_RST_REQ_VALUE		0xF0000020
+#define LTQ_RCU_RST_REQ			0x0010	/* Reset request */
+#define LTQ_RCU_RST_REQ_VALUE		((1 << 14) | (1 << 1))
 
 /* CGU module register */
 #define LTQ_CGU_PLL0_CFG		0x0004	/* PLL0 config */
 #define LTQ_CGU_PLL1_CFG		0x0008	/* PLL1 config */
 #define LTQ_CGU_PLL2_CFG		0x0060	/* PLL2 config */
 #define LTQ_CGU_SYS			0x000C	/* System clock */
-#define LTQ_CGU_CLK_FSR		0x0010	/* Clock frequency select */
+#define LTQ_CGU_CLK_FSR			0x0010	/* Clock frequency select */
 
 /* Valid SYS.CPU values */
 #define LTQ_CGU_SYS_CPU_SHIFT		4
-#define LTQ_CGU_SYS_CPU_600_MHZ	0x0
-#define LTQ_CGU_SYS_CPU_500_MHZ	0x1
-#define LTQ_CGU_SYS_CPU_393_MHZ	0x2
-#define LTQ_CGU_SYS_CPU_333_MHZ	0x3
-#define LTQ_CGU_SYS_CPU_197_MHZ	0x5
-#define LTQ_CGU_SYS_CPU_166_MHZ	0x7
-#define LTQ_CGU_SYS_CPU_125_MHZ	0x9
+#define LTQ_CGU_SYS_CPU_600_MHZ		0x0
+#define LTQ_CGU_SYS_CPU_500_MHZ		0x1
+#define LTQ_CGU_SYS_CPU_393_MHZ		0x2
+#define LTQ_CGU_SYS_CPU_333_MHZ		0x3
+#define LTQ_CGU_SYS_CPU_197_MHZ		0x5
+#define LTQ_CGU_SYS_CPU_166_MHZ		0x7
+#define LTQ_CGU_SYS_CPU_125_MHZ		0x9
 
 /* Valid SYS.OCP values */
 #define LTQ_CGU_SYS_OCP_SHIFT		0
@@ -72,10 +72,7 @@
 				(LTQ_CGU_CLK_FSR_PPE_CONFIG << \
 					LTQ_CGU_CLK_FSR_PPE_SHIFT))
 
-/* Reset values for PLL registers for usage with 36 MHz crystal */
-#define PLL0_36MHZ_CONFIG	0x00B01F21
-#define PLL1_36MHZ_CONFIG	0x9BA67015
-#define PLL2_36MHZ_CONFIG	0x293002C1
+	.set noreorder
 
 LEAF(ltq_cgu_init)
 	/* Load current CGU register values */
@@ -89,29 +86,27 @@ LEAF(ltq_cgu_init)
 
 	/* Only update registers if values differ */
 	bne	t1, t3, update
+	 nop
 	beq	t2, t4, finished
+	 nop
 
 update:
 	/* Store target register values */
 	sw	t3, LTQ_CGU_SYS(t0)
 	sw	t4, LTQ_CGU_CLK_FSR(t0)
 
-	li	t1, PLL0_36MHZ_CONFIG
-	sw	t1, LTQ_CGU_PLL0_CFG(t0)
-	li	t1, PLL1_36MHZ_CONFIG
-	sw	t1, LTQ_CGU_PLL1_CFG(t0)
-	li	t1, PLL2_36MHZ_CONFIG
-	sw	t1, LTQ_CGU_PLL2_CFG(t0)
-
 	/* Perform software reset to activate new clock config */
 	li	t0, (LTQ_RCU_BASE | KSEG1)
-	li	t1, LTQ_RCU_RST_REQ_VALUE
+	lw	t1, LTQ_RCU_RST_REQ(t0)
+	or	t1, LTQ_RCU_RST_REQ_VALUE
 	sw	t1, LTQ_RCU_RST_REQ(t0)
 
 wait_reset:
 	b	wait_reset
+	 nop
 
 finished:
 	jr	ra
+	 nop
 
 	END(ltq_cgu_init)
diff --git a/arch/mips/cpu/mips32/vrx200/chipid.c b/arch/mips/cpu/mips32/vrx200/chipid.c
index fdb420f1e8ce1d5acc8f3bdbca5c10f805ceec86..c21aab94086472b5f068d3f25295aeb85ae484ed 100644
--- a/arch/mips/cpu/mips32/vrx200/chipid.c
+++ b/arch/mips/cpu/mips32/vrx200/chipid.c
@@ -46,8 +46,15 @@ const char* ltq_chip_partnum_str(void)
 	enum ltq_chip_partnum partnum = ltq_chip_partnum_get();
 
 	switch (partnum) {
+	case LTQ_SOC_VRX268:
+	case LTQ_SOC_VRX268_2:
+		return "VRX268";
 	case LTQ_SOC_VRX288:
+	case LTQ_SOC_VRX288_2:
 		return "VRX288";
+	case LTQ_SOC_GRX288:
+	case LTQ_SOC_GRX288_2:
+		return "GRX288";
 	default:
 		printf("Unknown partnum: %x\n", partnum);
 	}
diff --git a/arch/mips/lib/spl_lantiq.c b/arch/mips/lib/spl_lantiq.c
index ec5aea4bb8bda50b6d3d6e8dad62d6d36f7a3ee0..24fc164c5a12aeca74e3ab5c3487a03260b4bfd2 100644
--- a/arch/mips/lib/spl_lantiq.c
+++ b/arch/mips/lib/spl_lantiq.c
@@ -224,10 +224,18 @@ static int spl_uncompress_lzma(const struct spl_image *spl)
 static int spl_uncompress_lzo(const struct spl_image *spl)
 {
 	size_t len;
+	int ret;
 
-	return lzop_decompress(
+	ret = lzop_decompress(
 			(const unsigned char*) spl->load_addr, spl->size,
 			(unsigned char *) spl->entry_addr, &len);
+
+	if (ret)
+		return ret;
+
+	flush_cache(spl->entry_addr, len);
+
+	return 0;
 }
 
 static int spl_uncompress(const struct spl_image *spl)
