diff --git a/Makefile b/Makefile
index daf7f0a443d4f51da3a64e59e9c068c6048cb928..e8cc8f461329a6b571a6196faf9851bcf247715c 100644
--- a/Makefile
+++ b/Makefile
@@ -24,7 +24,7 @@
 VERSION = 2013
 PATCHLEVEL = 04
 SUBLEVEL =
-EXTRAVERSION = -sphairon4.20
+EXTRAVERSION = -sphairon4.21
 ifneq "$(SUBLEVEL)" ""
 U_BOOT_VERSION = $(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
 else
diff --git a/arch/mips/config.mk b/arch/mips/config.mk
index 2f5331f1f5319b9cd4731c49b7bffab036cef915..62a484071a7e5cc373477df84614cc6091095284 100644
--- a/arch/mips/config.mk
+++ b/arch/mips/config.mk
@@ -64,7 +64,7 @@ PLATFORM_CPPFLAGS += -DCONFIG_MIPS -D__MIPS__
 PF_ABICALLS			?= -mabicalls
 PF_PIC				?= -fpic
 PF_PIE				?= -pie
-PF_OBJCOPY			?= -j .got -j .u_boot_list -j .rel.dyn
+PF_OBJCOPY			?= -j .got -j .u_boot_list -j .rel.dyn -j .padding
 
 PLATFORM_CPPFLAGS		+= -G 0 $(PF_ABICALLS) $(PF_PIC) $(ENDIANNESS)
 PLATFORM_CPPFLAGS		+= -msoft-float
diff --git a/arch/mips/cpu/mips32/start.S b/arch/mips/cpu/mips32/start.S
index 6292bdf816492d3a13291dc8a221dea6c062310a..0d62b61dc5a3e7a99fa1d6694a30517012a1b382 100644
--- a/arch/mips/cpu/mips32/start.S
+++ b/arch/mips/cpu/mips32/start.S
@@ -215,19 +215,19 @@ in_ram:
 	 * generated by GNU ld. Skip these reserved entries from relocation.
 	 */
 	lw	t3, -4(t0)		# t3 <-- num_got_entries
-	lw	t4, -8(t0)		# t4 <-- _GLOBAL_OFFSET_TABLE_
-	add	t4, s1			# t4 now holds relocated _G_O_T_
-	addi	t4, t4, 8		# skipping first two entries
+	lw	t8, -8(t0)		# t8 <-- _GLOBAL_OFFSET_TABLE_
+	add	t8, s1			# t8 now holds relocated _G_O_T_
+	addi	t8, t8, 8		# skipping first two entries
 	li	t2, 2
 1:
-	lw	t1, 0(t4)
+	lw	t1, 0(t8)
 	beqz	t1, 2f
 	 add	t1, s1
-	sw	t1, 0(t4)
+	sw	t1, 0(t8)
 2:
 	addi	t2, 1
 	blt	t2, t3, 1b
-	 addi	t4, 4
+	 addi	t8, 4
 
 	/* Update dynamic relocations */
 	lw	t1, -16(t0)		# t1 <-- __rel_dyn_start
@@ -245,11 +245,11 @@ in_ram:
 
 	lw	t3, -8(t1)		# t3 <-- location to fix up in FLASH
 
-	lw	t4, 0(t3)		# t4 <-- original pointer
-	add	t4, s1			# t4 <-- adjusted pointer
+	lw	t8, 0(t3)		# t8 <-- original pointer
+	add	t8, s1			# t8 <-- adjusted pointer
 
 	add	t3, s1			# t3 <-- location to fix up in RAM
-	sw	t4, 0(t3)
+	sw	t8, 0(t3)
 
 2:
 	blt	t1, t2, 1b
diff --git a/arch/mips/cpu/u-boot.lds b/arch/mips/cpu/u-boot.lds
index 41f0a675c8fe3a820ca14f5909297b1c631e6bbe..227c47463e4cec3e9fa411a52318929f1f4284c9 100644
--- a/arch/mips/cpu/u-boot.lds
+++ b/arch/mips/cpu/u-boot.lds
@@ -76,6 +76,24 @@ SECTIONS
 		__rel_dyn_end = .;
 	}
 
+	.padding : {
+		/*
+		 * Workaround for a binutils feature (or bug?).
+		 *
+		 * The GNU ld from binutils puts the dynamic relocation
+		 * entries into the .rel.dyn section. Sometimes it
+		 * allocates more dynamic relocation entries than it needs
+		 * and the unused slots are set to R_MIPS_NONE entries.
+		 *
+		 * However the size of the .rel.dyn section in the ELF
+		 * section header does not cover the unused entries, so
+		 * objcopy removes those during stripping.
+		 *
+		 * Create a small section here to avoid that.
+		 */
+		LONG(0xFFFFFFFF)
+	}
+
 	_end = .;
 
 	.bss __rel_dyn_start (OVERLAY) : {
